# Copyright (c) Facebook, Inc. and its affiliates.
# All rights reserved.
#
# This source code is licensed under the license found in the
# LICENSE file in the root directory of this source tree.
##############################################################################

"""An awesome colormap for really neat visualizations."""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import numpy as np

import random

def dist_colors(n):

    dist_hex = ['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6',
                '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3',
                '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000']
    dist_hex = dist_hex[:n]
    dist_color_rgb = []
    for dist_hex_i in dist_hex:
        dist_hex_i = dist_hex_i[1:]
        dist_color_rgb.append([int(dist_hex_i[i:i + 2], 16) for i in (0, 2, 4)])
    return np.array(dist_color_rgb)

def dist_colors_25(n):

    dist_hex = ["#023fa5", "#7d87b9", "#bec1d4", "#d6bcc0", "#bb7784",
                "#8e063b", "#4a6fe3", "#8595e1", "#b5bbe3", "#e6afb9",
                "#e07b91", "#d33f6a", "#11c638", "#8dd593", "#c6dec7",
                "#ead3c6", "#f0b98d", "#ef9708", "#0fcfc0", "#9cded6",
                "#d5eae7", "#f3e1eb", "#f6c4e1", "#f79cd4"]
    dist_hex = dist_hex[:n]
    dist_color_rgb = []
    for dist_hex_i in dist_hex:
        dist_hex_i = dist_hex_i[1:]
        dist_color_rgb.append([int(dist_hex_i[i:i + 2], 16) for i in (0, 2, 4)])
    return np.array(dist_color_rgb)

def dist_colors_64(n):

    dist_hex = ["#FFFF00", "#1CE6FF", "#FF34FF", "#FF4A46", "#008941", "#006FA6", "#A30059",
                "#FFDBE5", "#7A4900", "#0000A6", "#63FFAC", "#B79762", "#004D43", "#8FB0FF", "#997D87",
                "#5A0007", "#809693", "#FEFFE6", "#1B4400", "#4FC601", "#3B5DFF", "#4A3B53", "#FF2F80",
                "#61615A", "#BA0900", "#6B7900", "#00C2A0", "#FFAA92", "#FF90C9", "#B903AA", "#D16100",
                "#DDEFFF", "#000035", "#7B4F4B", "#A1C299", "#300018", "#0AA6D8", "#013349", "#00846F",
                "#372101", "#FFB500", "#C2FFED", "#A079BF", "#CC0744", "#C0B9B2", "#C2FF99", "#001E09",
                "#00489C", "#6F0062", "#0CBD66", "#EEC3FF", "#456D75", "#B77B68", "#7A87A1", "#788D66",
                "#885578", "#FAD09F", "#FF8A9A", "#D157A0", "#BEC459", "#456648", "#0086ED", "#886F4C",
                "#34362D", "#B4A8BD", "#00A6AA", "#452C2C", "#636375", "#A3C8C9", "#FF913F", "#938A81",
                "#575329", "#00FECF", "#B05B6F", "#8CD0FF", "#3B9700", "#04F757", "#C8A1A1", "#1E6E00",
                "#7900D7", "#A77500", "#6367A9", "#A05837", "#6B002C", "#772600", "#D790FF", "#9B9700",
                "#549E79", "#FFF69F", "#201625", "#72418F", "#BC23FF", "#99ADC0", "#3A2465", "#922329",
                "#5B4534", "#FDE8DC", "#404E55", "#0089A3", "#CB7E98", "#A4E804", "#324E72", "#6A3A4C","#000000"]
    dist_hex = dist_hex[:n]
    dist_color_rgb = []
    for dist_hex_i in dist_hex:
        dist_hex_i = dist_hex_i[1:]
        dist_color_rgb.append([int(dist_hex_i[i:i + 2], 16) for i in (0, 2, 4)])
    return np.array(dist_color_rgb)

def dist_colors_26_rgb_1(n):
    dist_rgb = [
        [2, 63, 165], [125, 135, 185], [190, 193, 212], [214, 188, 192], [187, 119, 132], [142, 6, 59],
        [74, 111, 227], [133, 149, 225], [181, 187, 227], [230, 175, 185], [224, 123, 145], [211, 63, 106], [17, 198, 56],
        [141, 213, 147], [198, 222, 199], [234, 211, 198], [240, 185, 141], [239, 151, 8], [15, 207, 192],
        [156, 222, 214], [213, 234, 231], [243, 225, 235], [246, 196, 225], [247, 156, 212]
    ]
    return np.array(dist_rgb)

def dist_colors_26_rgb(n):
    dist_rgb = [
        [240, 163, 255], [0, 117, 220], [153, 63, 0], [76, 0, 92], [255, 255, 0],
        [0, 92, 49], [43, 206, 72], [255, 204, 153], [128, 128, 128], [148, 255, 181],
        [143, 124, 0], [157, 204, 0], [194, 0, 136], [0, 51, 128],[255, 164, 5],
        [255, 168, 187], [66, 102, 0], [255, 0, 16], [94, 241, 242], [0, 153, 143],
        [224, 255, 102], [116, 10, 255], [153, 0, 0], [255, 255, 128], [255, 80, 5],
        [25, 25, 25]
    ]
    return np.array(dist_rgb)
def colors_num(n):
  ret = []
  r = int(random.random() * 256)
  g = int(random.random() * 256)
  b = int(random.random() * 256)
  step = 256 / n
  for i in range(n):
    r += step
    g += step
    b += step
    r = int(r) % 256
    g = int(g) % 256
    b = int(b) % 256
    ret.append([r,g,b])
  return np.array(ret)

def colormap(rgb=False):
    color_list = np.array(
        [
            0.000, 0.447, 0.741,
            0.850, 0.325, 0.098,
            0.929, 0.694, 0.125,
            0.494, 0.184, 0.556,
            0.466, 0.674, 0.188,
            0.301, 0.745, 0.933,
            0.635, 0.078, 0.184,
            0.300, 0.300, 0.300,
            0.600, 0.600, 0.600,
            1.000, 0.000, 0.000,
            1.000, 0.500, 0.000,
            0.749, 0.749, 0.000,
            0.000, 1.000, 0.000,
            0.000, 0.000, 1.000,
            0.667, 0.000, 1.000,
            0.333, 0.333, 0.000,
            0.333, 0.667, 0.000,
            0.333, 1.000, 0.000,
            0.667, 0.333, 0.000,
            0.667, 0.667, 0.000,
            0.667, 1.000, 0.000,
            1.000, 0.333, 0.000,
            1.000, 0.667, 0.000,
            1.000, 1.000, 0.000,
            0.000, 0.333, 0.500,
            0.000, 0.667, 0.500,
            0.000, 1.000, 0.500,
            0.333, 0.000, 0.500,
            0.333, 0.333, 0.500,
            0.333, 0.667, 0.500,
            0.333, 1.000, 0.500,
            0.667, 0.000, 0.500,
            0.667, 0.333, 0.500,
            0.667, 0.667, 0.500,
            0.667, 1.000, 0.500,
            1.000, 0.000, 0.500,
            1.000, 0.333, 0.500,
            1.000, 0.667, 0.500,
            1.000, 1.000, 0.500,
            0.000, 0.333, 1.000,
            0.000, 0.667, 1.000,
            0.000, 1.000, 1.000,
            0.333, 0.000, 1.000,
            0.333, 0.333, 1.000,
            0.333, 0.667, 1.000,
            0.333, 1.000, 1.000,
            0.667, 0.000, 1.000,
            0.667, 0.333, 1.000,
            0.667, 0.667, 1.000,
            0.667, 1.000, 1.000,
            1.000, 0.000, 1.000,
            1.000, 0.333, 1.000,
            1.000, 0.667, 1.000,
            0.167, 0.000, 0.000,
            0.333, 0.000, 0.000,
            0.500, 0.000, 0.000,
            0.667, 0.000, 0.000,
            0.833, 0.000, 0.000,
            1.000, 0.000, 0.000,
            0.000, 0.167, 0.000,
            0.000, 0.333, 0.000,
            0.000, 0.500, 0.000,
            0.000, 0.667, 0.000,
            0.000, 0.833, 0.000,
            0.000, 1.000, 0.000,
            0.000, 0.000, 0.167,
            0.000, 0.000, 0.333,
            0.000, 0.000, 0.500,
            0.000, 0.000, 0.667,
            0.000, 0.000, 0.833,
            0.000, 0.000, 1.000,
            0.000, 0.000, 0.000,
            0.143, 0.143, 0.143,
            0.286, 0.286, 0.286,
            0.429, 0.429, 0.429,
            0.571, 0.571, 0.571,
            0.714, 0.714, 0.714,
            0.857, 0.857, 0.857,
            1.000, 1.000, 1.000
        ]
    ).astype(np.float32)
    color_list = color_list.reshape((-1, 3)) * 255
    if not rgb:
        color_list = color_list[:, ::-1]
    return color_list
